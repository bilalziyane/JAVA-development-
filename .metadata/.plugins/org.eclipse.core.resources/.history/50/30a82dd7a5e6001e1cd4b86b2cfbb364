import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

public class ClientRMI extends JFrame {
    private JTextField wordInput;
    private JComboBox<String> fromLanguageCombo;
    private JComboBox<String> toLanguageCombo;
    private JTextArea translationArea;

    private String[] languages = {"Ar", "Fr", "En", "Es"};
    private ClientRMIStub clientRMIStub;

    public ClientRMI() {
        setTitle("Translation App");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(4, 1));

        JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel wordLabel = new JLabel("Word: ");
        wordInput = new JTextField(20);
        inputPanel.add(wordLabel);
        inputPanel.add(wordInput);
        mainPanel.add(inputPanel);

        JPanel comboPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JLabel fromLabel = new JLabel("From: ");
        fromLanguageCombo = new JComboBox<>(languages);
        JLabel toLabel = new JLabel("To: ");
        toLanguageCombo = new JComboBox<>(languages);
        comboPanel.add(fromLabel);
        comboPanel.add(fromLanguageCombo);
        comboPanel.add(toLabel);
        comboPanel.add(toLanguageCombo);
        mainPanel.add(comboPanel);

        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton translateButton = new JButton("Translate");
        translateButton.addActionListener(new TranslateButtonListener());
        buttonPanel.add(translateButton);
        mainPanel.add(buttonPanel);

        // Text area to display translation
        translationArea = new JTextArea(10, 30);
        translationArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(translationArea);
        mainPanel.add(scrollPane);

        add(mainPanel);

        // Initialisation de la connexion RMI
        initRMI();
    }

    // Initialisation de la connexion RMI
    private void initRMI() {
        try {
            // Obtenez le registre RMI sur le serveur spécifié
            Registry registry = LocateRegistry.getRegistry("localhost", 1099);

            // Récupérez la référence à l'objet distant enregistré avec le nom spécifié
            clientRMIStub = (ClientRMIStub) registry.lookup("ClientRMIStub");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private class TranslateButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String word = wordInput.getText();
            String sourceLanguage = (String) fromLanguageCombo.getSelectedItem();
            String targetLanguage = (String) toLanguageCombo.getSelectedItem();
            String translation = null;
			try {
				translation = clientRMIStub.translate(word, sourceLanguage, targetLanguage);
			} catch (RemoteException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
            translationArea.setText("Translated word: " + translation);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                ClientRMI app = new ClientRMI();
                app.setVisible(true);
            }
        });
    }
}
